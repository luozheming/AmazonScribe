@startuml
autonumber
Alice -> Bob: Authentication Request
Bob --> Alice: Authentication Response

Alice -> Bob: Another authentication Request
Alice <-- Bob: another authentication Response
@enduml


@startuml
A -> B: do something
B -> A: do something
@enduml


@startuml
actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5
collections Foo6
Foo1 -> Foo2 : To boundary
Foo1 -> Foo3 : To control
Foo1 -> Foo4 : To entity
Foo1 -> Foo5 : To database
Foo1 -> Foo6 : To collections
@enduml

@startuml
object Object01
object Object02
object Object03
object Object04
object Object05
object Object06
object Object07
object Object08

Object01 <|-- Object02
Object03 *-- Object04
Object05 o-- "4" Object06
Object07 .. Object08 : some labels
@enduml



@startuml
object DataCollection
DataCollection : data_collection_id
DataCollection : modified_time
DataCollection : create_time
DataCollection : seller_id
DataCollection : account_no
DataCollection : active
DataCollection : is_running
DataCollection : is_valid
DataCollection : start_time
DataCollection : end_time
DataCollection : schedule_config_key
DataCollection : survial_times

object DataTask
DataTask : data_task_id
DataTask : modified_time
DataTask : create_time
DataTask : data_collection_id
DataTask : status
DataTask : extend_info
DataTask : retry_times
DataTask : start_time
DataTask : end_time
DataTask : next_exec_time
DataCollection o-- DataTask : data_collection_id
@enduml


@startuml
state "Req(Id)" as ReqId <<sdlreceive>>
state "Minor(Id)" as MinorId
state "Major(Id)" as MajorId

state c <<choice>>

Idle --> ReqId
ReqId --> c
c --> MinorId : [Id <= 10]
c --> MajorId : [Id > 10]
@enduml


@startuml
[*] -> State1
State1 --> State2
note on link
  this is a state-transition note
end note
@enduml


@startuml
start
:init context;
:get handler from factory by action;
partition HandlerLogic{
:call api to prepare data;
:wait 5 seconds and call api to check data;
while(is the data ready?) is(N)
:call times plus one;
if(call times <=3 ?) then (Y)
:wait 5 seconds and call api to check data;
else(N)
:task run failed;
end
endif
endwhile(Y)
:get full data and process(split、analysis);
:store to database;
stop
@enduml


@startuml
while (check filesize ?) is (not empty)
  :read file;
endwhile (empty)
:close file;
@enduml


@startuml
start
:split 100 task;
:load collection with active=Y,is_valid=Y,is_running=N in each partition;
:get schedule config by schedule_config_key;
if (the config active=N?) then  (Y)
end
else (N)
if (end_time>=now-collection_floor) then (Y)
end
else (N)
:get lastest task(only one) with status in **init、running、retry** by data_collection_id;
endif
endif
if(task==null?) then (Y)
:get schedule config by schedule_key;
:create task and set start_time、end_time by config.caculate and set next_exec_time;
:store the task;
end
else (N)
end
endif
@enduml


@startuml
start
partition Splitor{
:split 100 task;
}
partition Loader{
:load data with status in **init、running、retry** and now >= next_exec_time in each partition;
}
partition Executor{
:set task status **RUNNING**;
:init context;
if(over retry times?) then(Y)
:set task status failed;
end
else (N)
if(isvalid of collection is Y?) then(N)
:set task status terminate;
end
else (Y)
if(active of collection is Y?) then(N)
:set task status terminate;
end
else(Y)
:recaculate next exec time;
:assemble parameter;
:do handle;
if(task run success) then(Y)
:execute post-processing;
:set task status **DONE**;
else(N)
:increase retry times;
:set task status **Retry**;
endif
stop
@enduml
